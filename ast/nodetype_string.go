// Code generated by "stringer -type=NodeType"; DO NOT EDIT.

package ast

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PROGRAM-1]
	_ = x[LET_STATEMENT-2]
	_ = x[FOR_STATEMENT-3]
	_ = x[EXPRESSION_STATEMENT-4]
	_ = x[IF_STATEMENT-5]
	_ = x[BLOCK_STATEMENT-6]
	_ = x[INFIX_EXPRESSION-7]
	_ = x[ASSIGNMENT_EXPRESSION-8]
	_ = x[OR_EXPRESSION-9]
	_ = x[AND_EXPRESSION-10]
	_ = x[ATTR_EXPRESSION-11]
	_ = x[INDEX_EXPRESSION-12]
	_ = x[CALL_EXPRESSION-13]
	_ = x[IF_ELSE_EXPRESSION-14]
	_ = x[NIL_LITERAL-15]
	_ = x[BOOLEAN_LITERAL-16]
	_ = x[IDENTIFIER_LITERAL-17]
	_ = x[NUMBER_LITERAL-18]
	_ = x[STRING_LITERAL-19]
	_ = x[FUNCTION_LITERAL-20]
	_ = x[ARRAY_LITERAL-21]
}

const _NodeType_name = "PROGRAMLET_STATEMENTFOR_STATEMENTEXPRESSION_STATEMENTIF_STATEMENTBLOCK_STATEMENTINFIX_EXPRESSIONASSIGNMENT_EXPRESSIONOR_EXPRESSIONAND_EXPRESSIONATTR_EXPRESSIONINDEX_EXPRESSIONCALL_EXPRESSIONIF_ELSE_EXPRESSIONNIL_LITERALBOOLEAN_LITERALIDENTIFIER_LITERALNUMBER_LITERALSTRING_LITERALFUNCTION_LITERALARRAY_LITERAL"

var _NodeType_index = [...]uint16{0, 7, 20, 33, 53, 65, 80, 96, 117, 130, 144, 159, 175, 190, 208, 219, 234, 252, 266, 280, 296, 309}

func (i NodeType) String() string {
	i -= 1
	if i >= NodeType(len(_NodeType_index)-1) {
		return "NodeType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _NodeType_name[_NodeType_index[i]:_NodeType_index[i+1]]
}

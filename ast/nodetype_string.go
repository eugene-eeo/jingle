// Code generated by "stringer -type=NodeType"; DO NOT EDIT.

package ast

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PROGRAM-1]
	_ = x[LET_STATEMENT-2]
	_ = x[FOR_STATEMENT-3]
	_ = x[EXPRESSION_STATEMENT-4]
	_ = x[IF_STATEMENT-5]
	_ = x[BLOCK_STATEMENT-6]
	_ = x[CLASS_STATEMENT-7]
	_ = x[RETURN_STATEMENT-8]
	_ = x[METHOD_DECLARATION-9]
	_ = x[PREFIX_EXPRESSION-10]
	_ = x[INFIX_EXPRESSION-11]
	_ = x[ASSIGNMENT_EXPRESSION-12]
	_ = x[OR_EXPRESSION-13]
	_ = x[AND_EXPRESSION-14]
	_ = x[ATTR_EXPRESSION-15]
	_ = x[INDEX_EXPRESSION-16]
	_ = x[CALL_EXPRESSION-17]
	_ = x[IF_ELSE_EXPRESSION-18]
	_ = x[NIL_LITERAL-19]
	_ = x[BOOLEAN_LITERAL-20]
	_ = x[IDENTIFIER_LITERAL-21]
	_ = x[NUMBER_LITERAL-22]
	_ = x[STRING_LITERAL-23]
	_ = x[FUNCTION_LITERAL-24]
	_ = x[ARRAY_LITERAL-25]
}

const _NodeType_name = "PROGRAMLET_STATEMENTFOR_STATEMENTEXPRESSION_STATEMENTIF_STATEMENTBLOCK_STATEMENTCLASS_STATEMENTRETURN_STATEMENTMETHOD_DECLARATIONPREFIX_EXPRESSIONINFIX_EXPRESSIONASSIGNMENT_EXPRESSIONOR_EXPRESSIONAND_EXPRESSIONATTR_EXPRESSIONINDEX_EXPRESSIONCALL_EXPRESSIONIF_ELSE_EXPRESSIONNIL_LITERALBOOLEAN_LITERALIDENTIFIER_LITERALNUMBER_LITERALSTRING_LITERALFUNCTION_LITERALARRAY_LITERAL"

var _NodeType_index = [...]uint16{0, 7, 20, 33, 53, 65, 80, 95, 111, 129, 146, 162, 183, 196, 210, 225, 241, 256, 274, 285, 300, 318, 332, 346, 362, 375}

func (i NodeType) String() string {
	i -= 1
	if i >= NodeType(len(_NodeType_index)-1) {
		return "NodeType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}
	return _NodeType_name[_NodeType_index[i]:_NodeType_index[i+1]]
}

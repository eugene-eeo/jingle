// Code generated by "stringer -type=TokenType"; DO NOT EDIT.

package scanner

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TokenEOF-0]
	_ = x[TokenOr-1]
	_ = x[TokenAnd-2]
	_ = x[TokenFn-3]
	_ = x[TokenEnd-4]
	_ = x[TokenFor-5]
	_ = x[TokenWhile-6]
	_ = x[TokenIn-7]
	_ = x[TokenDo-8]
	_ = x[TokenIf-9]
	_ = x[TokenThen-10]
	_ = x[TokenElse-11]
	_ = x[TokenLet-12]
	_ = x[TokenClass-13]
	_ = x[TokenDef-14]
	_ = x[TokenReturn-15]
	_ = x[TokenNil-16]
	_ = x[TokenBoolean-17]
	_ = x[TokenString-18]
	_ = x[TokenNumber-19]
	_ = x[TokenIdent-20]
	_ = x[TokenComma-21]
	_ = x[TokenSeparator-22]
	_ = x[TokenLParen-23]
	_ = x[TokenRParen-24]
	_ = x[TokenLBrace-25]
	_ = x[TokenRBrace-26]
	_ = x[TokenLBracket-27]
	_ = x[TokenRBracket-28]
	_ = x[TokenBang-29]
	_ = x[TokenDot-30]
	_ = x[TokenPlus-31]
	_ = x[TokenMinus-32]
	_ = x[TokenMul-33]
	_ = x[TokenDiv-34]
	_ = x[TokenSet-35]
	_ = x[TokenEq-36]
	_ = x[TokenNeq-37]
	_ = x[TokenLt-38]
	_ = x[TokenGt-39]
	_ = x[TokenLeq-40]
	_ = x[TokenGeq-41]
}

const _TokenType_name = "TokenEOFTokenOrTokenAndTokenFnTokenEndTokenForTokenWhileTokenInTokenDoTokenIfTokenThenTokenElseTokenLetTokenClassTokenDefTokenReturnTokenNilTokenBooleanTokenStringTokenNumberTokenIdentTokenCommaTokenSeparatorTokenLParenTokenRParenTokenLBraceTokenRBraceTokenLBracketTokenRBracketTokenBangTokenDotTokenPlusTokenMinusTokenMulTokenDivTokenSetTokenEqTokenNeqTokenLtTokenGtTokenLeqTokenGeq"

var _TokenType_index = [...]uint16{0, 8, 15, 23, 30, 38, 46, 56, 63, 70, 77, 86, 95, 103, 113, 121, 132, 140, 152, 163, 174, 184, 194, 208, 219, 230, 241, 252, 265, 278, 287, 295, 304, 314, 322, 330, 338, 345, 353, 360, 367, 375, 383}

func (i TokenType) String() string {
	if i < 0 || i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
